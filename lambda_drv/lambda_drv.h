#ifndef LAMBDA_DRV_H
#define LAMBDA_DRV_H

#include "lambda_drv_global.h"
#include "lambdadrv.h"

//class LAMBDA_DRVSHARED_EXPORT Lambda_drv
//{
//public:
//    Lambda_drv();
//};
extern "C"
{
LAMBDA_DRVSHARED_EXPORT int openSocket(char* ip, char* port);
LAMBDA_DRVSHARED_EXPORT int closeSocket();

LAMBDA_DRVSHARED_EXPORT char* FIRMWARE_REVISION_F();
LAMBDA_DRVSHARED_EXPORT int SET_VOLT_LIMIT_F(double val);
LAMBDA_DRVSHARED_EXPORT char* GET_VOLT_LIMIT_F();
LAMBDA_DRVSHARED_EXPORT int SET_CURR_LIMIT_F(double val);
LAMBDA_DRVSHARED_EXPORT char* GET_CURR_LIMIT_F();
LAMBDA_DRVSHARED_EXPORT int SET_OUTPUT_STATE_F(int val);
LAMBDA_DRVSHARED_EXPORT char* GET_OUTPUT_STATE_F();
LAMBDA_DRVSHARED_EXPORT char* MEAS_VOLTAGE_F();
LAMBDA_DRVSHARED_EXPORT char* MEAS_CURRENT_F();
LAMBDA_DRVSHARED_EXPORT char* READ_CONSTANT_MODE_F();
LAMBDA_DRVSHARED_EXPORT int SET_SETTING_MODE_F(int val);
LAMBDA_DRVSHARED_EXPORT char* GET_SETTING_MODE_F();
LAMBDA_DRVSHARED_EXPORT int SET_START_MODE_F(int val);
LAMBDA_DRVSHARED_EXPORT char* GET_START_MODE_F();
LAMBDA_DRVSHARED_EXPORT int SET_OVERVOLT_PROTECTION_F(double val);
LAMBDA_DRVSHARED_EXPORT char* GET_OVERVOLT_PROTECTION_F();
LAMBDA_DRVSHARED_EXPORT char* READ_OVERVOLT_TRIPPED_F();
LAMBDA_DRVSHARED_EXPORT int SET_UNDERVOLT_LIMIT_F(double val);
LAMBDA_DRVSHARED_EXPORT char* GET_UNDERVOLT_LIMIT_F();
LAMBDA_DRVSHARED_EXPORT int SET_FOLDBACK_PROTECTION_F(int val);
LAMBDA_DRVSHARED_EXPORT char* GET_FOLDBACK_PROTECTION_F();
LAMBDA_DRVSHARED_EXPORT char* READ_FOLDBACK_TRIPPED_F();
LAMBDA_DRVSHARED_EXPORT int SET_LAN_LED_STATE_F(int val);
LAMBDA_DRVSHARED_EXPORT char* READ_HOSTNAME_F();
LAMBDA_DRVSHARED_EXPORT char* READ_IP_ADDRESS_F();
LAMBDA_DRVSHARED_EXPORT char* READ_MAC_ADDRESS_F();
LAMBDA_DRVSHARED_EXPORT int RESET_LAN_SETTINGS_F();
LAMBDA_DRVSHARED_EXPORT int RESET_PS_SETTINGS_F();
LAMBDA_DRVSHARED_EXPORT int SAVE_PS_SETTINGS_F();
LAMBDA_DRVSHARED_EXPORT int RECALL_PS_SETTINGS_F();
LAMBDA_DRVSHARED_EXPORT int SELF_TEST_F();
LAMBDA_DRVSHARED_EXPORT int sendedState();
}

#endif // LAMBDA_DRV_H
